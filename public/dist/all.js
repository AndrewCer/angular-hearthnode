var app=angular.module("hearthNode",["ngRoute","ngCookies"]);app.config(function(e,r){e.when("/",{templateUrl:"partials/home.html",controller:"HomeController"}).when("/deck/:class",{templateUrl:"partials/class-deck.html",controller:"ClassDeckController"}).when("/user-decks/:userId",{templateUrl:"partials/user-decks.html",controller:"UserDeckController"}).when("/all-decks",{templateUrl:"partials/all-decks.html",controller:"PublishedDeckController"}).otherwise({redirectTo:"/"}),r.html5Mode(!0)}),String.prototype.capitalize=function(){return this.toLowerCase().replace(/\b\w/g,function(e){return e.toUpperCase()})},app.controller("AccountController",["$scope","$http","$cookies","$location",function(e,r,a,t){e.isActive=function(e){return e===t.path()},e.checkActive=!0;var s=function(){var t=a.get("local");return t?void r.post("api/cookies",{userinfo:t}).then(function(r){return r.data?(e.loggedIn=!0,e.usersName=r.data.capitalize(),e.userinfo=a.get("local"),void 0):null}):null};s(),e.logIn=function(){var t=e.loginName,s=e.loginPassword;r.post("api/login",{username:t,password:s}).then(function(r){r.data?(e.loggedIn=!0,e.usersName=t.capitalize(),a.put("local",r.data),e.userinfo=a.get("local"),e.showLogin=!1,e.loginName=null,e.loginPassword=null):e.userPassError="Username or password do not match"})},e.logOut=function(){e.loggedIn=!1,e.usersName=null,a.remove("local"),r.get("api/logout").then(function(e){return t.path("/")})},e.signUp=function(){e.nameError=null,e.nameShortError=null,e.nameLongError=null,e.nameExists=null,e.emailExists=null,e.passwordError=null,e.passwordMatchError=null,e.serverError=null;var t=e.userName,s=e.email,n=e.password,o=e.passCheck,c=function(){e.password=null,e.passCheck=null},l=function(r,a,t){var s=/\W/,n=[];return r.length<5&&(e.nameShortError="Username is too short. Must be longer than 4 characters",c(),n.push(!0)),r.length>15&&(e.nameLongError="Username is too long. Must be less than 15 characters",c(),n.push(!0)),s.test(r)&&(e.nameError="Username contains illegal characters. Can only use letters, numbers and underscores (no spaces)",c(),n.push(!0)),a.length<6&&(e.passwordError="Password is too short. Must be greater than 5 characters",c(),n.push(!0)),a!=t&&(e.passwordMatchError="Passwords do not match",c(),n.push(!0)),n};0===l(t,n,o).length&&r.post("api/check-input",{username:t,email:s}).success(function(l){l.username===!0&&(e.nameExists="That user name is taken",c()),l.email===!0?(e.emailExists="That Email is already in use",c()):r.post("api/authenticate",{username:t,email:s,password:n,passCheck:o}).success(function(r){r?(e.loggedIn=!0,e.usersName=t.capitalize(),a.put("local",r),e.userinfo=a.get("local"),e.showForm=!1):(e.serverError="Something went wrong. Please try again",c())})})}}]),app.controller("HomeController",["$scope","$http","Warrior","Shaman","Rogue","Paladin","Hunter","Druid","Warlock","Mage","Priest",function($scope,$http,Warrior,Shaman,Rogue,Paladin,Hunter,Druid,Warlock,Mage,Priest){var classArray=["Warrior","Shaman","Rogue","Paladin","Hunter","Druid","Warlock","Mage","Priest"],getClassDecks=function(input){$http.get("api/deck/"+input).then(function(results){for(var filteredArray=[],i=0;i<results.data.cards.length;i++)results.data.cards[i].img&&"Hero"!=results.data.cards[i].type&&"Hero Power"!=results.data.cards[i].type&&filteredArray.push(results.data.cards[i]);eval(input).deckArray(filteredArray)})};if(0===Warrior.cards.length)for(var i=0;i<classArray.length;i++)getClassDecks(classArray[i])}]),app.controller("ClassDeckController",["$scope","$routeParams","$http","$location","Warrior","Shaman","Rogue","Paladin","Hunter","Druid","Warlock","Mage","Priest","$cookies",function($scope,$routeParams,$http,$location,Warrior,Shaman,Rogue,Paladin,Hunter,Druid,Warlock,Mage,Priest,$cookies){var deckClass=$routeParams["class"];if($scope.deckClass=$routeParams["class"],eval(deckClass).cards.length>0)$scope.cards=eval(deckClass).cards[0];else{var getClassDecks=function(input){$http.get("api/deck/"+input).then(function(results){for(var filteredArray=[],i=0;i<results.data.cards.length;i++)results.data.cards[i].img&&"Hero"!=results.data.cards[i].type&&"Hero Power"!=results.data.cards[i].type&&filteredArray.push(results.data.cards[i]);eval(input).deckArray(filteredArray),$scope.cards=eval(deckClass).cards[0]})};getClassDecks($routeParams["class"])}var stagedCardsArr=[];$scope.addCard=function(e){stagedCardsArr.length<30?($scope.cardsMaxed=null,e.count=1,stagedCardsArr.push(e),$scope.stagedCards=stagedCardsArr):$scope.cardsMaxed="Your deck is full"},$scope.removeCard=function(e){$scope.cardsMaxed=null,stagedCardsArr.splice(e,1)},$scope.clearDeck=function(){var e=confirm("Are you sure you want to clear your staging area?");return e?(stagedCardsArr=[],$scope.stagedCards=stagedCardsArr,$scope.cardsMaxed=null,void 0):null},$scope.createDeck=function(){var e=$cookies.get("local");e?$http.post("api/create-deck",{classDeck:deckClass,cards:stagedCardsArr,user:e}).then(function(r){$location.path("/user-decks/"+e)}):$scope.mustLogin="Please log in to create decks"}}]),app.controller("UserDeckController",["$scope","$http","$cookies","$location",function(e,r,a,t){var s=a.get("local");r.post("api/users-decks",{userinfo:s}).then(function(r){for(var a=r.data.decks,t=[],s=0;s<a.length;s++)t.push(Object.keys(a[s])[0].toLowerCase());e.decks=r.data.decks,e.deckKeys=t,e.userName=r.data.username.capitalize()}),e.getDeck=function(r){var a,t=e.decks,r=r.capitalize();e.hideMain=!0;for(var s=0;s<t.length;s++)r===Object.keys(t[s])[0]&&(a=t[s]);e.deckName=r,e.clickedDeck=a[r]},e.publishDeck=function(){var a=e.publishDeckName,n=e.deckDiscription,o=e.clickedDeck;r.post("api/live-decks",{deckName:a,description:n,deck:o,userinfo:s}).then(function(r){e.publish=!1,e.publishDeckName=null,e.deckDiscription=null,e.clickedDeck=null,t.path("/all-decks")})},e.deleteDeck=function(e){var t=a.get("local");r.post("api/delete-deck",{deck:e,userinfo:t}).then(function(e){})}}]),app.controller("PublishedDeckController",["$scope","$http","$cookies",function(e,r,a){r.get("api/all-decks").then(function(r){e.allPostedDecks=r.data.reverse()}),e.mathz=Math.floor(10*Math.random()+1),e.clickedPost=function(a){e.hideSection=!0,e.decksName=a.deckName,e.decksCards=a.deck,e.deckDescription=a.description,r.post("api/deck-query",{user:a.postedBy}).then(function(r){e.postUser=r.data.capitalize()})}}]),app.directive("modelUndefined",function(){return{require:"ngModel",link:function(e,r,a,t){t.$parsers.push(function(e){return null===e?void 0:e})}}}),app.factory("Warrior",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Shaman",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Rogue",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Paladin",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Hunter",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Druid",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Warlock",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Mage",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r}),app.factory("Priest",function(){var e=[],r={};return r.deckArray=function(r){return e.push(r),e},r.cards=e,r});