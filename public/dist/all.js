var app=angular.module("hearthNode",["ngRoute","ngCookies"]);app.config(["$routeProvider","$locationProvider",function(e,a){e.when("/",{templateUrl:"partials/home.html",controller:"HomeController"}).when("/deck/:class",{templateUrl:"partials/class-deck.html",controller:"ClassDeckController"}).when("/user-decks/:userId",{templateUrl:"partials/user-decks.html",controller:"UserDeckController"}).when("/all-decks",{templateUrl:"partials/all-decks.html",controller:"PublishedDeckController"}).otherwise({redirectTo:"/"}),a.html5Mode(!0)}]),String.prototype.capitalize=function(){return this.toLowerCase().replace(/\b\w/g,function(e){return e.toUpperCase()})},app.controller("AccountController",["$scope","$http","$cookies","$location",function(e,a,r,t){e.isActive=function(e){return e===t.path()},e.checkActive=!0;var o=function(){var t=r.get("local");return t?void a.post("api/cookies",{userinfo:t}).then(function(a){return a.data?(e.loggedIn=!0,e.usersName=a.data.capitalize(),e.userinfo=r.get("local"),void 0):null}):null};o(),e.logIn=function(){var t=e.loginName,o=e.loginPassword;a.post("api/login",{username:t,password:o}).then(function(a){a.data?(e.loggedIn=!0,e.usersName=t.capitalize(),r.put("local",a.data),e.userinfo=r.get("local"),e.showLogin=!1,e.loginName=null,e.loginPassword=null):e.userPassError="Username or password do not match"})},e.logOut=function(){e.loggedIn=!1,e.usersName=null,r.remove("local"),a.get("api/logout").then(function(e){return t.path("/")})},e.signUp=function(){e.nameError=null,e.nameShortError=null,e.nameLongError=null,e.nameExists=null,e.emailExists=null,e.passwordError=null,e.passwordMatchError=null,e.serverError=null;var t=e.userName,o=e.email,s=e.password,n=e.passCheck,l=function(){e.password=null,e.passCheck=null},c=function(a,r,t){var o=/\W/,s=[];return a.length<5&&(e.nameShortError="Username is too short. Must be longer than 4 characters",l(),s.push(!0)),a.length>15&&(e.nameLongError="Username is too long. Must be less than 15 characters",l(),s.push(!0)),o.test(a)&&(e.nameError="Username contains illegal characters. Can only use letters, numbers and underscores (no spaces)",l(),s.push(!0)),r.length<6&&(e.passwordError="Password is too short. Must be greater than 5 characters",l(),s.push(!0)),r!=t&&(e.passwordMatchError="Passwords do not match",l(),s.push(!0)),s};0===c(t,s,n).length&&a.post("api/check-input",{username:t,email:o}).success(function(c){c.username===!0&&(e.nameExists="That user name is taken",l()),c.email===!0?(e.emailExists="That Email is already in use",l()):a.post("api/authenticate",{username:t,email:o,password:s,passCheck:n}).success(function(a){a?(e.loggedIn=!0,e.usersName=t.capitalize(),r.put("local",a),e.userinfo=r.get("local"),e.showForm=!1,e.userName=null,e.email=null,e.password=null,e.passCheck=null):(e.serverError="Something went wrong. Please try again",l())})})}}]),app.controller("HomeController",["$scope","$http","ClassStore",function(e,a,r){var t=["Warrior","Shaman","Rogue","Paladin","Hunter","Druid","Warlock","Mage","Priest"],o=function(e){a.get("api/deck/"+e).then(function(a){for(var t=[],o=0;o<a.data.cards.length;o++)a.data.cards[o].img&&"Hero"!=a.data.cards[o].type&&"Hero Power"!=a.data.cards[o].type&&t.push(a.data.cards[o]);r.deckStorage(t,e)})};if(void 0===r.decks.length)for(var s=0;s<t.length;s++)o(t[s])}]),app.controller("ClassDeckController",["$scope","$routeParams","$http","$location","ClassStore","$cookies",function(e,a,r,t,o,s){var n=a["class"];if(e.deckClass=a["class"],o.decks[n])e.cards=o.decks[n];else{var l=function(a){r.get("api/deck/"+a).then(function(r){for(var t=[],s=0;s<r.data.cards.length;s++)r.data.cards[s].img&&"Hero"!=r.data.cards[s].type&&"Hero Power"!=r.data.cards[s].type&&t.push(r.data.cards[s]);o.deckStorage(t,a),e.cards=o.decks[n]})};l(a["class"])}var c=[];e.addCard=function(a){c.length<30?(e.cardsMaxed=null,a.count=1,c.push(a),e.stagedCards=c):e.cardsMaxed="Your deck is full"},e.removeCard=function(a){e.cardsMaxed=null,c.splice(a,1)},e.clearDeck=function(){var a=confirm("Are you sure you want to clear your staging area?");return a?(c=[],e.stagedCards=c,e.cardsMaxed=null,void 0):null},e.createDeck=function(){var a=s.get("local");a?r.post("api/create-deck",{classDeck:n,cards:c,user:a}).then(function(e){t.path("/user-decks/"+a)}):e.mustLogin="Please log in to create decks"}}]),app.controller("UserDeckController",["$scope","$http","$cookies","$location",function(e,a,r,t){var o=r.get("local");a.post("api/users-decks",{userinfo:o}).then(function(a){for(var r=a.data.decks,t=[],o=0;o<r.length;o++)t.push(Object.keys(r[o])[0].toLowerCase());e.decks=a.data.decks,e.deckKeys=t,e.userName=a.data.username.capitalize()}),e.getDeck=function(a){var r,t=e.decks,a=a.capitalize();e.hideMain=!0;for(var o=0;o<t.length;o++)a===Object.keys(t[o])[0]&&(r=t[o]);e.deckName=a,e.clickedDeck=r[a]},e.publishDeck=function(){var r=e.publishDeckName,s=e.deckDiscription,n=e.clickedDeck;a.post("api/live-decks",{deckName:r,description:s,deck:n,userinfo:o}).then(function(a){e.publish=!1,e.publishDeckName=null,e.deckDiscription=null,e.clickedDeck=null,t.path("/all-decks")})},e.deleteDeck=function(e){var t=r.get("local");a.post("api/delete-deck",{deck:e,userinfo:t}).then(function(e){})}}]),app.controller("PublishedDeckController",["$scope","$http","$cookies",function(e,a,r){a.get("api/all-decks").then(function(a){e.allPostedDecks=a.data.reverse()}),e.mathz=Math.floor(10*Math.random()+1),e.clickedPost=function(r){e.hideSection=!0,e.decksName=r.deckName,e.decksCards=r.deck,e.deckDescription=r.description,a.post("api/deck-query",{user:r.postedBy}).then(function(a){e.postUser=a.data.capitalize()})}}]),app.directive("modelUndefined",function(){return{require:"ngModel",link:function(e,a,r,t){t.$parsers.push(function(e){return null===e?void 0:e})}}}),app.factory("ClassStore",function(){var e={},a={};return e.deckStorage=function(e,r){return a[r]=e,a},e.decks=a,e});
