var app=angular.module("hearthNode",["ngRoute","ngCookies"]);app.config(["$routeProvider","$locationProvider",function(e,r){e.when("/",{templateUrl:"partials/home.html",controller:"HomeController"}).when("/deck/:class",{templateUrl:"partials/class-deck.html",controller:"ClassDeckController"}).when("/user-decks/:userId",{templateUrl:"partials/user-decks.html",controller:"UserDeckController"}).when("/all-decks",{templateUrl:"partials/all-decks.html",controller:"PublishedDeckController"}).otherwise({redirectTo:"/"}),r.html5Mode(!0)}]),String.prototype.capitalize=function(){return this.toLowerCase().replace(/\b\w/g,function(e){return e.toUpperCase()})},app.controller("AccountController",["$scope","$http","$cookies","$location",function(e,r,a,t){e.isActive=function(e){return e===t.path()},e.checkActive=!0;var o=function(){var t=a.get("local");return t?void r.post("api/cookies",{userinfo:t}).then(function(r){return r.data?(e.loggedIn=!0,e.usersName=r.data.capitalize(),e.userinfo=a.get("local"),void 0):null}):null};o(),e.logIn=function(){var t=e.loginName,o=e.loginPassword;r.post("api/login",{username:t,password:o}).then(function(r){r.data?(e.loggedIn=!0,e.usersName=t.capitalize(),a.put("local",r.data),e.userinfo=a.get("local"),e.showLogin=!1,e.loginName=null,e.loginPassword=null):e.userPassError="Username or password do not match"})},e.logOut=function(){e.loggedIn=!1,e.usersName=null,a.remove("local"),r.get("api/logout").then(function(e){return t.path("/")})},e.signUp=function(){e.nameError=null,e.nameShortError=null,e.nameLongError=null,e.nameExists=null,e.emailExists=null,e.passwordError=null,e.passwordMatchError=null,e.serverError=null;var t=e.userName,o=e.email,n=e.password,s=e.passCheck,c=function(){e.password=null,e.passCheck=null},l=function(r,a,t){var o=/\W/,n=[];return r.length<5&&(e.nameShortError="Username is too short. Must be longer than 4 characters",c(),n.push(!0)),r.length>15&&(e.nameLongError="Username is too long. Must be less than 15 characters",c(),n.push(!0)),o.test(r)&&(e.nameError="Username contains illegal characters. Can only use letters, numbers and underscores (no spaces)",c(),n.push(!0)),a.length<6&&(e.passwordError="Password is too short. Must be greater than 5 characters",c(),n.push(!0)),a!=t&&(e.passwordMatchError="Passwords do not match",c(),n.push(!0)),n};0===l(t,n,s).length&&r.post("api/check-input",{username:t,email:o}).success(function(l){l.username===!0&&(e.nameExists="That user name is taken",c()),l.email===!0?(e.emailExists="That Email is already in use",c()):r.post("api/authenticate",{username:t,email:o,password:n,passCheck:s}).success(function(r){r?(e.loggedIn=!0,e.usersName=t.capitalize(),a.put("local",r),e.userinfo=a.get("local"),e.showForm=!1):(e.serverError="Something went wrong. Please try again",c())})})}}]),app.controller("HomeController",["$scope","$http","ClassStore",function(e,r,a){var t=["Warrior","Shaman","Rogue","Paladin","Hunter","Druid","Warlock","Mage","Priest"],o=function(e){r.get("api/deck/"+e).then(function(r){for(var t=[],o=0;o<r.data.cards.length;o++)r.data.cards[o].img&&"Hero"!=r.data.cards[o].type&&"Hero Power"!=r.data.cards[o].type&&t.push(r.data.cards[o]);a.deckStorage(t,e)})};if(void 0===a.decks.length)for(var n=0;n<t.length;n++)o(t[n])}]),app.controller("ClassDeckController",["$scope","$routeParams","$http","$location","ClassStore","$cookies",function(e,r,a,t,o,n){var s=r["class"];if(e.deckClass=r["class"],o.decks[s])e.cards=o.decks[s];else{var c=function(r){a.get("api/deck/"+r).then(function(a){for(var t=[],n=0;n<a.data.cards.length;n++)a.data.cards[n].img&&"Hero"!=a.data.cards[n].type&&"Hero Power"!=a.data.cards[n].type&&t.push(a.data.cards[n]);o.deckStorage(t,r),e.cards=o.decks[s]})};c(r["class"])}var l=[];e.addCard=function(r){l.length<30?(e.cardsMaxed=null,r.count=1,l.push(r),e.stagedCards=l):e.cardsMaxed="Your deck is full"},e.removeCard=function(r){e.cardsMaxed=null,l.splice(r,1)},e.clearDeck=function(){var r=confirm("Are you sure you want to clear your staging area?");return r?(l=[],e.stagedCards=l,e.cardsMaxed=null,void 0):null},e.createDeck=function(){var r=n.get("local");r?a.post("api/create-deck",{classDeck:s,cards:l,user:r}).then(function(e){t.path("/user-decks/"+r)}):e.mustLogin="Please log in to create decks"}}]),app.controller("UserDeckController",["$scope","$http","$cookies","$location",function(e,r,a,t){var o=a.get("local");r.post("api/users-decks",{userinfo:o}).then(function(r){for(var a=r.data.decks,t=[],o=0;o<a.length;o++)t.push(Object.keys(a[o])[0].toLowerCase());e.decks=r.data.decks,e.deckKeys=t,e.userName=r.data.username.capitalize()}),e.getDeck=function(r){var a,t=e.decks,r=r.capitalize();e.hideMain=!0;for(var o=0;o<t.length;o++)r===Object.keys(t[o])[0]&&(a=t[o]);e.deckName=r,e.clickedDeck=a[r]},e.publishDeck=function(){var a=e.publishDeckName,n=e.deckDiscription,s=e.clickedDeck;r.post("api/live-decks",{deckName:a,description:n,deck:s,userinfo:o}).then(function(r){e.publish=!1,e.publishDeckName=null,e.deckDiscription=null,e.clickedDeck=null,t.path("/all-decks")})},e.deleteDeck=function(e){var t=a.get("local");r.post("api/delete-deck",{deck:e,userinfo:t}).then(function(e){})}}]),app.controller("PublishedDeckController",["$scope","$http","$cookies",function(e,r,a){r.get("api/all-decks").then(function(r){e.allPostedDecks=r.data.reverse()}),e.mathz=Math.floor(10*Math.random()+1),e.clickedPost=function(a){e.hideSection=!0,e.decksName=a.deckName,e.decksCards=a.deck,e.deckDescription=a.description,r.post("api/deck-query",{user:a.postedBy}).then(function(r){e.postUser=r.data.capitalize()})}}]),app.directive("modelUndefined",function(){return{require:"ngModel",link:function(e,r,a,t){t.$parsers.push(function(e){return null===e?void 0:e})}}}),app.factory("ClassStore",function(){var e={},r={};return e.deckStorage=function(e,a){return r[a]=e,r},e.decks=r,e});